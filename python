1.  用ET find和findall进行xml数据配置_byseyOrd
    find和findall支持的xpath语法
    for neighbor in root.findall("*/neighbor"):
        print("neighbor---:"+neighbor.get("name"))
    结果：
    neighbor---:Austria
    neighbor---:Switzerland
    neighbor---:Malaysia
    neighbor---:Costa Rica
    neighbor---:Colombia
    
2.Python strip()方法
    Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。
    注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。
    
对比：
    split()：语法：str.split(str="",num=string.count(str))[n]
    拆分字符串。通过制定分隔符将字符串进行切片，并返回分割后的字符串列表[list]
    str：分隔符，默认为空格，但不能为空("")
    num: 表示分割次数。如果指定num，则分割成n+1个子字符串，并可将每个字符串赋给新的变量
    [n]: 选取第n个分片，即第n个字符串，从0开始算。
    
3.numpy 中的随机打乱数据方法np.random.shuffle
    #实验可得每次shuffle后数据都被打乱，这个方法可以在机器学习训练
    eg:
        xml_labels = os.listdir(xml_dir)
        np.random.shuffle(xml_labels)
       
        
4.os.path.join()
    连接两个或更多的路径名组件(可以是多个)

5.shutil.copy(src,newsrc)
    将src文件copy到newsrc中去

6. torch.stack()
    官方解释：沿着一个新维度对输入张量序列进行连接。 序列中所有的张量都应该为相同形状。
    浅显说法：把多个2维的张量凑成一个3维的张量；多个3维的凑成一个4维的张量…以此类推，也就是在增加新的维度进行堆叠。
    eg:
        # 假设是时间步T1的输出
        T1 = torch.tensor([[1, 2, 3],
        		        [4, 5, 6],
        		        [7, 8, 9]])
        # 假设是时间步T2的输出
        T2 = torch.tensor([[10, 20, 30],
        		        [40, 50, 60],
        		        [70, 80, 90]])
        print(torch.stack((T1,T2),dim=0).shape)   #dim是选择生成的维度
        print(torch.stack((T1,T2),dim=1).shape)
        print(torch.stack((T1,T2),dim=2).shape)
        print(torch.stack((T1,T2),dim=3).shape)
        # outputs:
        torch.Size([2, 3, 3])
        torch.Size([3, 2, 3])
        torch.Size([3, 3, 2])
        '选择的dim>len(outputs)，所以报错'
        IndexError: Dimension out of range (expected to be in range of [-3, 2], but got 3)

7.  .join()用法
     eg:    ','.join('abc')
            上面代码的含义是“将字符串abc中的每个成员以字符','分隔开再拼接成一个字符串”，输出结果为：
            'a,b,c'
     
